name: DangerJS comment

on:
  workflow_run:
    workflows: ["DangerJS"]
    types:
      - completed

jobs:
  danger-comment:
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "output.json"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/output.json.zip', Buffer.from(download.data));
      - run: unzip output.json.zip
      - name: Extract PR number
        id: pr-number
        run: |
          pr_number=$(jq --raw-output ".metadata.pr" output.json)
          echo "::set-output name=pr-id::${pr_number}"

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ steps.pr-number.outputs.pr-id }}
          comment-author: 'github-actions[bot]'
          body-includes: Danger result for
      - name: Create or update comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const outputJsonText = fs.readFileSync('output.json', 'utf8');
            const outputJson = JSON.parse(outputJsonText);
            let commentBody = `## Danger result for ${outputJson.metadata.commit} \n`;
            if(outputJson.output.fails.length > 0) {
              commentBody += "| | Fails |\n"
              commentBody += "-----------\n"
              for(let i = 0; i < outputJson.output.fails.length; i++) {
                commentBody += `| :no_entry_sign: | ${outputJson.output.fails[i]} |\n`;
              }
              commentBody += "\n";
            }
            if(outputJson.output.warnings.length > 0) {
              commentBody += "| | Warnings |\n"
              commentBody += "-----------\n"
              for(let i = 0; i < outputJson.output.warnings.length; i++) {
                commentBody += `| :warning: | ${outputJson.output.warnings[i]} |\n`;
              }
              commentBody += "\n";
            }
            if(outputJson.output.messages.length > 0) {
              commentBody += "| | Messages |\n"
              commentBody += "-----------\n"
              for(let i = 0; i < outputJson.output.messages.length; i++) {
                commentBody += `| :heavy_check_mark: | ${outputJson.output.messages[i]} |\n`;
              }
              commentBody += "\n";
            }
            const commentId = "${{ steps.fc.outputs.comment-id }}";
            if(commentId){
              github.rest.issues.updateComment({
                comment_id: commentId,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              })
            } else {
              github.rest.issues.createComment({
                issue_number: "${{ steps.pr-number.outputs.pr-id }}",
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
            })
            }

      # - build the output comment body
      # - find the previous comment
      # - post a new comment
      # think about using a git submodule to centrally manage scripts like above
      # see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/